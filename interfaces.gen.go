// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=interfaces.gen.go -package=eventbus
//
// Package eventbus is a generated GoMock package.
package eventbus

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockpubSub is a mock of pubSub interface.
type MockpubSub[pubInput any, pubOutput any, subInput any, subOutput any] struct {
	ctrl     *gomock.Controller
	recorder *MockpubSubMockRecorder[pubInput, pubOutput, subInput, subOutput]
}

// MockpubSubMockRecorder is the mock recorder for MockpubSub.
type MockpubSubMockRecorder[pubInput any, pubOutput any, subInput any, subOutput any] struct {
	mock *MockpubSub[pubInput, pubOutput, subInput, subOutput]
}

// NewMockpubSub creates a new mock instance.
func NewMockpubSub[pubInput any, pubOutput any, subInput any, subOutput any](ctrl *gomock.Controller) *MockpubSub[pubInput, pubOutput, subInput, subOutput] {
	mock := &MockpubSub[pubInput, pubOutput, subInput, subOutput]{ctrl: ctrl}
	mock.recorder = &MockpubSubMockRecorder[pubInput, pubOutput, subInput, subOutput]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpubSub[pubInput, pubOutput, subInput, subOutput]) EXPECT() *MockpubSubMockRecorder[pubInput, pubOutput, subInput, subOutput] {
	return m.recorder
}

// Publish mocks base method.
func (m *MockpubSub[pubInput, pubOutput, subInput, subOutput]) Publish(ctx context.Context, input pubInput) (pubOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, input)
	ret0, _ := ret[0].(pubOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockpubSubMockRecorder[pubInput, pubOutput, subInput, subOutput]) Publish(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockpubSub[pubInput, pubOutput, subInput, subOutput])(nil).Publish), ctx, input)
}

// Subscribe mocks base method.
func (m *MockpubSub[pubInput, pubOutput, subInput, subOutput]) Subscribe(ctx context.Context, input subInput) (subOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, input)
	ret0, _ := ret[0].(subOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockpubSubMockRecorder[pubInput, pubOutput, subInput, subOutput]) Subscribe(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockpubSub[pubInput, pubOutput, subInput, subOutput])(nil).Subscribe), ctx, input)
}
